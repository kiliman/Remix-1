// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id    Int    @id @default(autoincrement())
  name  String
  logo  String
  email String
  phone String

  branches Branch[]
}

model Branch {
  id              Int        @id @default(autoincrement())
  name            String
  ppt_image       String
  email           String
  phone           String?
  city            String
  address         String
  extraAddress    String
  rating          Float
  rating_quantity Int
  cuisine         String
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId    Int
  tables          Table[]
  menus           Menu[]
}

model Table {
  id                Int     @id @default(autoincrement())
  table_number      Int
  order_in_progress Boolean
  branch            Branch  @relation(fields: [branchId], references: [id])
  branchId          Int
  order             Order?
}

model Menu {
  id             Int            @id @default(autoincrement())
  name           String?
  branch         Branch         @relation(fields: [branchId], references: [id])
  branchId       Int
  menuCategories MenuCategory[]
}

model MenuCategory {
  id        Int        @id @default(autoincrement())
  name      String
  menu      Menu       @relation(fields: [menuId], references: [id])
  menuId    Int
  menuItems MenuItem[]
}

model MenuItem {
  id             Int             @id @default(autoincrement())
  image          String
  name           String
  description    String
  price          Float
  available      Boolean
  menuCategory   MenuCategory?   @relation(fields: [menuCategoryId], references: [id])
  menuCategoryId Int?
  menuItemExtras MenuItemExtra[]
  orderItems     OrderItem[]
}

model MenuItemExtra {
  id              Int              @id @default(autoincrement())
  image           String
  name            String
  description     String
  price           Float
  available       Boolean
  menuItem        MenuItem         @relation(fields: [menuItemId], references: [id])
  menuItemId      Int
  orderItemExtras OrderItemExtra[]
}

model Order {
  id           Int         @id @default(autoincrement())
  paid         Boolean
  creationDate DateTime
  orderedDate  DateTime
  table        Table?      @relation(fields: [tableId], references: [id])
  tableId      Int?        @unique
  orderItems   OrderItem[]
  users        User[]
}

model OrderItem {
  id              Int              @id @default(autoincrement())
  price           Float
  quantity        Int
  menuItem        MenuItem?        @relation(fields: [menuItemId], references: [id])
  menuItemId      Int?
  order           Order            @relation(fields: [orderId], references: [id])
  orderId         Int
  orderItemExtras OrderItemExtra[]
}

model OrderItemExtra {
  id              Int            @id @default(autoincrement())
  quantity        Int
  menuItemExtra   MenuItemExtra? @relation(fields: [menuItemExtraId], references: [id])
  menuItemExtraId Int?
  orderItem       OrderItem      @relation(fields: [orderItemId], references: [id])
  orderItemId     Int
}

model User {
  id      Int    @id @default(autoincrement())
  email   String
  total   Float
  Order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?
}
